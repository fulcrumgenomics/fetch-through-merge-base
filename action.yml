name: 'Fetch through merge-base'
author: Nils Homer (@nh13)
description: 'Fetch PR commits through the merge-base'
branding:
  icon: "code"
  color: "green"
inputs:
  base-ref:
    default: ${{ github.base_ref }}
    required: false
    description: >
      The base ref or target branch in the workflow run.  If empty or 
      not defined, the `fallback-base-ref` input ref will be used.
  head-ref:
    default: ${{ github.head_ref }}
    required: false
    description: >
      The head ref or source branch in the workflow run.  If empty or
      not defined, the `fallback-head-ref` input ref will be used.
  fallback-base-ref:
    default: "main"
    required: false
    description: >
      The base ref to use when `base-ref` is empty or not defined.  For
      example, when using `github.base_ref` for `base-ref`, and the
      workflow is not a `pull_request` or `pull_request_target`, then
      the `base-ref` is not defined, so this ref will be used.
  fallback-head-ref: 
    default: ${{ github.sha }}
    required: false
    description: >
      The head ref to use when `head-ref` is empty or not defined.  For
      example, when using `github.head_ref` for `head-ref`, and the
      workflow is not a `pull_request` or `pull_request_target`, then
      the `head-ref` is not defined, so this ref will be used.
  deepen-length:
    default: 10
    required: false
    description: >
      The number of commits to increase from the tip of each base and ref
      history when `git merge-base` fails to find the common ancestor of 
      the two commits.
  fail-after:
    default: 100
    required: false
    description: >
      The number of attempts to deepen before the action fails.
  working-directory:
    default: ./
    required: false
    description: >
      The working directory to switch to when runnign this action.
  fallback-fetch-all:
    default: false
    required: false
    description: >
      True to fetch all commits if number of attempts to deepen reaches 
      its limit, false to fail the action.
outputs:
  base-ref:
    description: >
      The base ref computed by the workflow run.  This differs from the
      input base ref when the latter is empty and the fallback base ref
      is used.
    value: ${{ steps.fetch_through_merge_base.outputs.base-ref }}
  head-ref:
    description: >
      The head ref computed by the workflow run.  This differs from the
      input head ref when the latter is empty and the fallback head ref
      is used.
    value: ${{ steps.fetch_through_merge_base.outputs.head-ref }}
  ancestor-ref:
    description: >
      The best common ancestor between the base and head references,
      or empty if none was found.
    value: ${{ steps.finalize.outputs.ancestor-ref }}
runs:
  using: "composite"
  steps: 
    - id: setup-gha-timer
      uses: fulcrumgenomics/gha-timer@v1
    - id: print-banner
      name: Print Banner
      shell: bash
      run: |
        cat ${GITHUB_ACTION_PATH}/src/misc/banner.txt
    - id: fetch_through_merge_base
      continue-on-error: true
      shell: bash
      env:
        BASE_REF: ${{ inputs.base-ref }}
        HEAD_REF: ${{ inputs.head-ref }}
        FALLBACK_BASE_REF: ${{ inputs.fallback-base-ref }}
        FALLBACK_HEAD_REF: ${{ inputs.fallback-head-ref }}
        DEEPEN_LENGTH: ${{ inputs.deepen-length }}
        FAIL_AFTER: ${{ inputs.fail-after }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        FALLBACK_FETCH_ALL: ${{ inputs.fallback-fetch-all }}
      run: |
        gha-timer start --name "Setting up environment variables...🚦"
        cd $WORKING_DIRECTORY;
        if [ -z "$BASE_REF" ] ; then
            export GITHUB_BASE_REF="$FALLBACK_BASE_REF"
        else
            export GITHUB_BASE_REF="$BASE_REF"
        fi
        if [ -z "$HEAD_REF" ] ; then
            export GITHUB_HEAD_REF="$FALLBACK_HEAD_REF"
        else
            export GITHUB_HEAD_REF="$HEAD_REF"
        fi
        export GITHUB_BASE_REF="${GITHUB_BASE_REF}" >> $GITHUB_ENV
        export GITHUB_HEAD_REF="${GITHUB_HEAD_REF}" >> $GITHUB_ENV
        echo base-ref="${GITHUB_BASE_REF}" >> $GITHUB_OUTPUT
        echo head-ref="${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
        echo "GITHUB_BASE_REF=$GITHUB_BASE_REF"
        echo "GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
        export GITHUB_BASE_REF
        export GITHUB_HEAD_REF
        gha-timer elapsed --outcome success --name "Setting up environment variables...🚦"
        set -euo pipefail
        bash ${{ github.action_path }}/src/scripts/fetch_through_merge_base.sh        
    # Note: `outcome` does not consider `continue-on-error`
    # Note: fallback-fetch-all is a string, not a boolean, since type is not supported
    # for inputs on composite actions (only workflows).
    - id: check_for_failure
      if: ${{ steps.fetch_through_merge_base.outcome == 'failure' && inputs.fallback-fetch-all == 'false' }}
      shell: bash
      env:
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      run: |
        echo "Action failed! ❌"
        exit 1
    - id: fallback 
      if: ${{ steps.fetch_through_merge_base.outcome == 'failure' && inputs.fallback-fetch-all == 'true' }}
      shell: bash
      env:
        BASE_REF: ${{ steps.fetch_through_merge_base.outputs.base-ref }}
        HEAD_REF: ${{ steps.fetch_through_merge_base.outputs.head-ref }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      run: |
        gha-time start --name "Falling back to fetching all...🚦"
        cd $WORKING_DIRECTORY;
        git fetch --all --unshallow --verbose;
        python ${{ github.action_path }}/src/scripts/git_ungraft.py;
        echo -n "Verifying merge-base: "
        gha-time elapsed --outcome success --name "Falling back to fetching all...🚦"
        git merge-base $BASE_REF $HEAD_REF
    - id: finalize
      if: always()
      shell: bash
      env:
        BASE_REF: ${{ steps.fetch_through_merge_base.outputs.base-ref }}
        HEAD_REF: ${{ steps.fetch_through_merge_base.outputs.head-ref }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      run: |
        gha-timer start --name "Getting merge-base (ancestor-ref)...🚦"
        cd $WORKING_DIRECTORY;
        ancestor_ref="$(git merge-base $BASE_REF $HEAD_REF)";
        echo "ancestor-ref=${ancestor_ref}" >> $GITHUB_OUTPUT
        gha-timer elapsed --outcome success --name "Getting merge-base (ancestor-ref)...🚦"
        gha-timer stop
        echo "Merge base is:"
        echo ${ancestor_ref}
        echo "Action succeeded! ✅"
